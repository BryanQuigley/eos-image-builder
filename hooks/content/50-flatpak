#!/usr/bin/python3 -u

# Pull flatpak apps, appstream and runtimes to a local repository

from gi import require_version
require_version('Flatpak', '1.0')
require_version('OSTree', '1.0')
from gi.repository import Flatpak, Gio, GLib, OSTree
import os
import subprocess

if os.environ.get('EIB_FLATPAK_ENABLE') != 'true':
    exit(0)

# Enable debug logging for all flatpak operations
os.environ['G_MESSAGES_DEBUG'] = 'flatpak'

# Pull settings out of environment variables
runtimes_remote = os.environ['EIB_FLATPAK_RUNTIMES_REMOTE']
runtimes_url = os.environ['EIB_FLATPAK_RUNTIMES_SERVER']
runtimes_deploy_url = os.environ['EIB_FLATPAK_RUNTIMES_DEPLOY_SERVER']
runtime = os.environ['EIB_FLATPAK_RUNTIME']
sdk = os.environ['EIB_FLATPAK_SDK']
install_sdk = os.environ['EIB_FLATPAK_INSTALL_SDK']
apps_remote = os.environ['EIB_FLATPAK_APPS_REMOTE']
apps_url = os.environ['EIB_FLATPAK_APPS_SERVER']
apps_deploy_url = os.environ['EIB_FLATPAK_APPS_DEPLOY_SERVER']
apps = os.environ['EIB_FLATPAK_INSTALL_EOS'].split()
arch = os.environ['EIB_FLATPAK_RUNTIME_ARCH']
branch = os.environ['EIB_BRANCH']
apps_deploy_branch = os.environ['EIB_FLATPAK_APPS_BRANCH']

# Optionally use the production flatpak repos rather than staging.
if os.environ.get('EIB_USE_PRODUCTION_APPS') == 'true':
    runtimes_url = runtimes_deploy_url
    apps_url = apps_deploy_url

# Create an ostree repository. archive-z2 is used to save disk space on
# the builder since the objects won't be able to be hardlinked when
# pulling into the deployment repo.
repo_path = os.path.join(os.environ['EIB_CONTENTDIR'], 'flatpak/repo')
repo_file = Gio.File.new_for_path(repo_path)
repo = OSTree.Repo.new(repo_file)
print('Opening flatpak content repo at', repo_path)
try:
    repo.open()
except:
    os.makedirs(repo_path, exist_ok=True)
    repo.create(OSTree.RepoMode.ARCHIVE_Z2)

# Open the parent directory as a flatpak installation so the API can be
# used for repo operations
installation_file = repo_file.get_parent()
installation = Flatpak.Installation.new_for_path(installation_file,
                                                 user=False)

# Add runtimes and apps remotes
for remote, url in ((runtimes_remote, runtimes_url),
                    (apps_remote, apps_url)):
    print('Adding remote', remote, url)
    repo.remote_change(None, OSTree.RepoRemoteChange.DELETE_IF_EXISTS,
                       remote, url)
    repo.remote_change(None, OSTree.RepoRemoteChange.ADD, remote, url)

# Put together a list of refs that will be pulled to find out which
# existing refs can be pruned
runtime_refs = {'runtime/{}/{}/{}'.format(runtime, arch, branch)}
if install_sdk == 'true':
    runtime_refs.add('runtime/{}/{}/{}'.format(sdk, arch, branch))
app_refs = {'app/{}/{}/{}'.format(app, arch, branch) for app in apps}

# For each app, make sure that the necessary runtime will be installed.
# Drop the installation caches so the above repo changes are seen by
# flatpak.
installation.drop_caches()
for refspec in app_refs:
    # Fetch the metadata for the app
    ref = Flatpak.Ref.parse(refspec)
    buf = installation.fetch_remote_metadata_sync(apps_remote, ref)

    # Load it into a keyfile and get the runtime
    metadata = GLib.KeyFile.new()
    metadata.load_from_bytes(buf, GLib.KeyFileFlags.NONE)
    runtime = metadata.get_string('Application', 'runtime')
    runtime_refs.add('runtime/' + runtime)

# Check that all the wanted runtimes are available on the remote. If
# they're not there, warn and assume they'll be added from another
# mechanism.
_, available_runtimes_info = repo.remote_list_refs(runtimes_remote)
available_runtimes = set(available_runtimes_info.keys())
if not runtime_refs.issubset(available_runtimes):
    for ref in runtime_refs - available_runtimes:
        print('Warning: skipping', ref, 'not available from',
              runtimes_remote)
    runtime_refs.intersection_update(available_runtimes)

# Find all the existing refs and delete unneeded ones
_, existing_refs_info = repo.list_refs()
existing_refs = set(existing_refs_info.keys())
needed_refs = runtime_refs.union(app_refs)
for refspec in existing_refs - needed_refs:
    print('Removing unneeded ref', refspec)
    _, remote, ref = OSTree.parse_refspec(refspec)
    repo.set_ref_immediate(remote, ref, None)

# Convert the refs sets to sorted lists for nicer output below
runtime_refs = sorted(runtime_refs)
app_refs = sorted(app_refs)

# Pull the refs
print('Pulling runtime refs:', *runtime_refs, sep='\n')
repo.pull(runtimes_remote, runtime_refs, OSTree.RepoPullFlags.MIRROR)
print('Pulling app refs:', *app_refs, sep='\n')
repo.pull(apps_remote, app_refs, OSTree.RepoPullFlags.MIRROR)

# Create refs to the stable series for flatpak to pull from
for ref in app_refs:
    series_ref = '{}/{}'.format(ref.rsplit('/', 1)[0],
                                apps_deploy_branch)
    print('Creating ref', series_ref, 'to', ref)
    _, rev = repo.resolve_rev(ref, False)
    repo.set_ref_immediate(None, series_ref, rev)

# Prune all but the latest referenced commits. Note that doing the
# pruning now after the pull is the best for downloading since we can
# use all existing objects at the expense of disk space on the builder.
print('Pruning repo')
repo.prune(OSTree.RepoPruneFlags.REFS_ONLY, 0)

# Create the summary file. Use flatpak build-update-repo so the summary
# file gets generated with all the app metadata to be used for the
# actual installation.
print('Regenerating summary')
subprocess.check_call(['flatpak', 'build-update-repo', repo_path])
