#!/usr/bin/python3 -u

# Pull flatpak apps, appstream and runtimes to a local repository

from gi import require_version
require_version('OSTree', '1.0')
from gi.repository import Gio, OSTree
import os

if os.environ.get('EIB_FLATPAK_ENABLE') != 'true':
    exit(0)

# Pull settings out of environment variables
runtimes_remote = os.environ['EIB_FLATPAK_RUNTIMES_REMOTE']
runtimes_url = os.environ['EIB_FLATPAK_RUNTIMES_SERVER']
runtime = os.environ['EIB_FLATPAK_RUNTIME']
sdk = os.environ['EIB_FLATPAK_SDK']
install_sdk = os.environ['EIB_FLATPAK_INSTALL_SDK']
apps_remote = os.environ['EIB_FLATPAK_APPS_REMOTE']
apps_url = os.environ['EIB_FLATPAK_APPS_SERVER']
apps = os.environ['EIB_FLATPAK_INSTALL'].split()
arch = os.environ['EIB_FLATPAK_RUNTIME_ARCH']
branch = os.environ['EIB_BRANCH']
apps_deploy_branch = os.environ['EIB_FLATPAK_APPS_BRANCH']

# Create an ostree repository. archive-z2 is used to save disk space on
# the builder since the objects won't be able to be hardlinked when
# pulling into the deployment repo.
repo_path = os.path.join(os.environ['EIB_CONTENTDIR'], 'flatpak/repo')
repo_file = Gio.File.new_for_path(repo_path)
repo = OSTree.Repo.new(repo_file)
print('Opening flatpak content repo at', repo_path)
try:
    repo.open()
except:
    os.makedirs(repo_path, exist_ok=True)
    repo.create(OSTree.RepoMode.ARCHIVE_Z2)

# Add runtimes and apps remotes
for remote, url in ((runtimes_remote, runtimes_url),
                    (apps_remote, apps_url)):
    print('Adding remote', remote, url)
    repo.remote_change(None, OSTree.RepoRemoteChange.DELETE_IF_EXISTS,
                       remote, url)
    repo.remote_change(None, OSTree.RepoRemoteChange.ADD, remote, url)

# Put together a list of refs that will be pulled to find out which
# existing refs can be pruned
runtime_refs = ['runtime/{}/{}/{}'.format(runtime, arch, branch)]
if install_sdk == 'true':
    runtime_refs.append('runtime/{}/{}/{}'.format(sdk, arch, branch))
app_refs = ['app/{}/{}/{}'.format(app, arch, branch) for app in apps]
needed_refs = set(runtime_refs + app_refs)

# Find all the existing refs and delete unneeded ones
_, existing_refs_info = repo.list_refs()
existing_refs = set(existing_refs_info.keys())
for refspec in existing_refs - needed_refs:
    print('Removing unneeded ref', refspec)
    _, remote, ref = OSTree.parse_refspec(refspec)
    repo.set_ref_immediate(remote, ref, None)

# Pull the refs
print('Pulling runtime refs:', *runtime_refs, sep='\n')
repo.pull(runtimes_remote, runtime_refs, OSTree.RepoPullFlags.MIRROR)
print('Pulling app refs:', *app_refs, sep='\n')
repo.pull(apps_remote, app_refs, OSTree.RepoPullFlags.MIRROR)

# Create refs to the stable series for flatpak to pull from
for ref in app_refs:
    series_ref = '{}/{}'.format(ref.rsplit('/', 1)[0],
                                apps_deploy_branch)
    print('Creating ref', series_ref, 'to', ref)
    _, rev = repo.resolve_rev(ref, False)
    repo.set_ref_immediate(None, series_ref, rev)

# Prune all but the latest referenced commits. Note that doing the
# pruning now after the pull is the best for downloading since we can
# use all existing objects at the expense of disk space on the builder.
print('Pruning repo')
repo.prune(OSTree.RepoPruneFlags.REFS_ONLY, 0)

# Create the summary file. Don't use flatpak build-update repo since it
# will rebuild the appstream branch and we don't need that here.
print('Regenerating summary')
repo.regenerate_summary()
