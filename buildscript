#!/bin/bash -ex
# -*- mode: Shell-script; sh-basic-offset: 2; indent-tabs-mode: nil -*-
# Run the eib_error stage on errors. Return code 2 is used for image
# build failures to differentiate from locking failures.
stage_error() {
  eib_error
  exit 2
}
trap stage_error ERR

# Ensure basic settings are available from the environment.
for var in EIB_BASELIB EIB_SRCDIR EIB_CACHEDIR EIB_DATADIR \
  EIB_HELPERSDIR EIB_OUTDIR EIB_TMPDIR EIB_CONTENTDIR
do
  if [ ! -v $var ]; then
    echo "error: required variable $var not set" >&2
    exit 1
  fi
done

# Change back to the source directory since we've chrooted.
cd "${EIB_SRCDIR}"

# Make sure to find our stage scripts and python library
export PATH="${EIB_SRCDIR}/stages:${PATH}"
export PYTHONPATH="${EIB_SRCDIR}/lib${PYTHONPATH:+:$PYTHONPATH}"

# Use our helper script for git access over ssh
export GIT_SSH="${EIB_HELPERSDIR}/git-ssh"

# Tell aws tools to use credentials in sysconfdir
export AWS_SHARED_CREDENTIALS_FILE="${EIB_SYSCONFDIR}/aws-credentials"

. "${EIB_BASELIB}"

exec > >(tee "${EIB_TMPDIR}"/build.txt)
exec 2>&1

# Check if build needed unless forced
if [ "${EIB_FORCE}" != true ]; then
  if eib_check_update; then
    # Exit early
    exit 0
  else
    # See if this was a real error
    ret=$?
    [ $ret -eq $EIB_CHECK_EXIT_BUILD_NEEDED ] || exit $ret
  fi
fi

# Real build stages
eib_ostree
eib_image
eib_manifest
eib_publish
